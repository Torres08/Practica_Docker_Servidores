# 3,8 es la ultima version de docker, cada version van a√±adiendo caracteristicas
version: '3.8'

# la estructura de cada webX es un servicio, indicas la imagen que se va a usar, el build para construir la imagen, los volumenes que se van a usar y las redes que se van a usar
# - image: imagen a usar
# - dockerfile: fichero dockerfile que se va a usar
# - volumes: volumenes que se van a usar
# - networks: redes que se van a usar

services:
  balanceador-nginx:
    build:
      context: .
      dockerfile: DockerfileNginx_juanluisUGR
    image: juanluistr-nginx-image:p2
    volumes:
      - ./nginx_conf:/etc/nginx/conf.d
    ports:
      - "3000:80"
    networks:
      red_web:
        ipv4_address: 192.168.10.50
    depends_on:
      - web1
      - web2
      - web3
      - web4
      - web5
      - web6
      - web7
      - web8
  
  web1:
    image: juanluistr-apache-image:p1
    privileged: true  
    build:
      context: .
      dockerfile: DockerfileApache_juanluisUGR
    volumes:
      - ./web_usuarioUGR:/var/www/html
    networks:
      red_web:
        ipv4_address: 192.168.10.9
      red_servicios:
        ipv4_address: 192.168.20.9
    #ports:
    #  - "8081:80" 

  web2:
    image: juanluistr-apache-image:p1
    build:
      context: .
      dockerfile: DockerfileApache_juanluisUGR
    volumes:
      - ./web_usuarioUGR:/var/www/html
    networks:
      red_web:
        ipv4_address: 192.168.10.2
      red_servicios:
        ipv4_address: 192.168.20.2
    #ports:
    #  - "8082:80" 

  web3:
    image: juanluistr-apache-image:p1
    build:
      context: .
      dockerfile: DockerfileApache_juanluisUGR
    volumes:
      - ./web_usuarioUGR:/var/www/html
    networks:
      red_web:
        ipv4_address: 192.168.10.3
      red_servicios:
        ipv4_address: 192.168.20.3
    #ports:
    #  - "8083:80" 

  web4:
    image: juanluistr-apache-image:p1
    build:
      context: .
      dockerfile: DockerfileApache_juanluisUGR
    volumes:
      - ./web_usuarioUGR:/var/www/html
    networks:
      red_web:
        ipv4_address: 192.168.10.4
      red_servicios:
        ipv4_address: 192.168.20.4
    #ports:
    #  - "8084:80"

  web5:
    image: juanluistr-apache-image:p1
    build:
      context: .
      dockerfile: DockerfileApache_juanluisUGR
    volumes:
      - ./web_usuarioUGR:/var/www/html
    networks:
      red_web:
        ipv4_address: 192.168.10.5
      red_servicios:
        ipv4_address: 192.168.20.5
    #ports:
    #  - "8085:80"
    

  web6:
    image: juanluistr-apache-image:p1
    build:
      context: .
      dockerfile: DockerfileApache_juanluisUGR
    volumes:
      - ./web_usuarioUGR:/var/www/html
    networks:
      red_web:
        ipv4_address: 192.168.10.6
      red_servicios:
        ipv4_address: 192.168.20.6
    #ports:
    #  - "8086:80"

  web7:
    image: juanluistr-apache-image:p1
    build:
      context: .
      dockerfile: DockerfileApache_juanluisUGR
    volumes:
      - ./web_usuarioUGR:/var/www/html
    networks:
      red_web:
        ipv4_address: 192.168.10.7
      red_servicios:
        ipv4_address: 192.168.20.7
    #ports:
    #  - "8087:80"

  web8:
    image: juanluistr-apache-image:p1
    build:
      context: .
      dockerfile: DockerfileApache_juanluisUGR
    volumes:
      - ./web_usuarioUGR:/var/www/html
    networks:
      red_web:
        ipv4_address: 192.168.10.8
      red_servicios:
        ipv4_address: 192.168.20.8
    #ports:
    # - "8088:80"


networks:
  red_web:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.10.0/24
    

  red_servicios:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.20.0/24

